import random

def build_markov_chain(text, n=1):
    """Builds a Markov chain of order n from the input text."""
    words = text.split()
    markov_chain = {}

    for i in range(len(words) - n):
        key = tuple(words[i:i + n])
        next_word = words[i + n]
        markov_chain.setdefault(key, []).append(next_word)
    
    return markov_chain

def generate_text(chain, n=1, max_words=50):
    """Generates text using the given Markov chain."""
    key = random.choice(list(chain.keys()))
    output = list(key)

    for _ in range(max_words - n):
        next_words = chain.get(key)
        if not next_words:
            break
        next_word = random.choice(next_words)
        output.append(next_word)
        key = tuple(output[-n:])
    
    return ' '.join(output)


















 Sample Usage

if __name__ == "__main__":
    sample_text = """
    In the middle of the night, the moon shone brightly over the silent city. 
    A cat leaped gracefully from one rooftop to another. 
    The streets below were quiet and still.
    """
    
    n = 2  # Order of Markov Chain (bigram)
    markov_chain = build_markov_chain(sample_text, n)
    generated = generate_text(markov_chain, n, max_words=30)
    
    print("Generated Text:\n", generated)


Output Example

Generated Text:
In the middle of the night the moon shone brightly over the silent city A cat leaped gracefully from one rooftop
