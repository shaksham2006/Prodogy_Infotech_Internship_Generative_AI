import random

class MarkovChainTextGenerator:
    def __init__(self):
        self.model = {}

    def train(self, text, n=1):
        """Train the Markov model with the given text and n-gram size."""
        words = text.split()
        for i in range(len(words) - n):
            key = tuple(words[i:i+n])
            next_word = words[i+n]
            if key not in self.model:
                self.model[key] = []
            self.model[key].append(next_word)

    def generate(self, length=50, seed=None):
        """Generate text of a given length from the trained model."""
        if not self.model:
            raise ValueError("The model has not been trained yet.")

        if seed is None:
            seed = random.choice(list(self.model.keys()))
        output = list(seed)

        for _ in range(length - len(seed)):
            key = tuple(output[-len(seed):])
            next_words = self.model.get(key)
            if not next_words:
                break
            next_word = random.choice(next_words)
            output.append(next_word)

        return ' '.join(output)




#TEST CODE

if __name__ == "__main__":
    sample_text = """
    The sun rises in the east and sets in the west. The moon shines at night.
    The stars twinkle in the sky. The sky is blue. The sea is vast and deep.
    """

    generator = MarkovChainTextGenerator()
    generator.train(sample_text, n=2)  # using bigrams

    generated_text = generator.generate(length=30)
    print("Generated Text:\n", generated_text)
